#!/usr/bin/env python3
"""
Adiciona emojis relevantes aos 30 agentes que n√£o t√™m emoji definido.
"""

import os
from pymongo import MongoClient
from dotenv import load_dotenv

load_dotenv()

MONGO_URI = os.getenv('MONGO_URI', 'mongodb://admin:czrimr@localhost:27017/?authSource=admin')
DB_NAME = 'conductor_state'

# Mapeamento de emojis por agent_id
EMOJI_MAPPING = {
    # Database & Backend
    'MongoDBTest_Agent': 'üçÉ',
    'DatabaseExpert_Agent': 'üóÑÔ∏è',
    'MongoKotlinExpert_Agent': 'üçÉ',
    'MongoTest_Agent': 'üî¨',

    # API & Architecture
    'APIArchitect_Agent': 'üèóÔ∏è',

    # Frontend
    'AngularExpert_Agent': 'üÖ∞Ô∏è',
    'ReactExpert_Agent': '‚öõÔ∏è',

    # Code Quality & Review
    'CodeReviewer_Agent': 'üëÅÔ∏è',
    'PerformanceOptimizer_Agent': '‚ö°',
    'SecuritySpecialist_Agent': 'üîí',
    'TestingSpecialist_Agent': 'üß™',

    # DevOps & Tools
    'CommitMessage_Agent': 'üìù',
    'Executor_Agent': '‚öôÔ∏è',
    'LogAnalyzer_Agent': 'üìä',

    # Documentation
    'DocWriter_Agent': 'üìö',
    'DocumentationExpert_Agent': 'üìñ',
    'ReadmeResume_Agent': 'üìã',

    # Content & Marketing
    'GitLinkedInPromotion_Agent': 'üì¢',
    'LinkedInContent_Agent': 'üíº',
    'StrategicComment_Agent': 'üí¨',

    # Creative & Storytelling
    'ScreenplayNarrativeDeveloper_Agent': 'üé¨',
    'SequenceDiagramGenerator_Agent': 'üìê',

    # Business & Strategy
    'BusinessStrategy_Agent': 'üí°',

    # Web & Scraping
    'WebScraper_Agent': 'üï∏Ô∏è',

    # Meta & System
    'AgentCreator_Agent': 'üîß',
    'Maestro_Agent': 'üéº',
    'SystemGuide_Meta_Agent': 'üß≠',

    # Test Agents
    'TestAgent': 'üß™',
    'TestDirectCall_Agent': 'üî¨',
    'TestQuickValidation_Agent': '‚úÖ',
}

def main():
    print("=" * 80)
    print("Adicionando Emojis aos Agentes")
    print("=" * 80)

    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    collection = db['agents']

    updated_count = 0
    not_found_count = 0

    print(f"\nüîÑ Processando {len(EMOJI_MAPPING)} agentes...\n")

    for agent_id, emoji in EMOJI_MAPPING.items():
        result = collection.update_one(
            {'agent_id': agent_id},
            {'$set': {'definition.emoji': emoji}}
        )

        if result.matched_count > 0:
            if result.modified_count > 0:
                # Buscar nome do agente
                agent = collection.find_one({'agent_id': agent_id})
                name = agent.get('definition', {}).get('name', agent_id)
                print(f"‚úÖ {emoji} {name}")
                updated_count += 1
            else:
                print(f"‚è≠Ô∏è  {emoji} {agent_id} (j√° tinha emoji)")
        else:
            print(f"‚ùå {agent_id} - N√£o encontrado no banco")
            not_found_count += 1

    print("\n" + "=" * 80)
    print("üìä Resumo")
    print("=" * 80)
    print(f"‚úÖ Atualizados: {updated_count}")
    print(f"‚è≠Ô∏è  J√° tinham: {len(EMOJI_MAPPING) - updated_count - not_found_count}")
    print(f"‚ùå N√£o encontrados: {not_found_count}")

    # Verificar estado final
    total_com_emoji = collection.count_documents({'definition.emoji': {'$exists': True}})
    total_sem_emoji = collection.count_documents({'definition.emoji': {'$exists': False}})

    print("\n" + "=" * 80)
    print("üîç Estado Final do Banco")
    print("=" * 80)
    print(f"‚úÖ Agentes COM emoji: {total_com_emoji}")
    print(f"‚ùå Agentes SEM emoji: {total_sem_emoji}")

    if total_sem_emoji > 0:
        print(f"\n‚ö†Ô∏è  Ainda existem {total_sem_emoji} agentes sem emoji:")
        sem_emoji = collection.find({'definition.emoji': {'$exists': False}}, {'agent_id': 1})
        for agent in sem_emoji:
            print(f"   - {agent.get('agent_id')}")

    client.close()
    print("\n‚úÖ Conclu√≠do!")

if __name__ == '__main__':
    main()
