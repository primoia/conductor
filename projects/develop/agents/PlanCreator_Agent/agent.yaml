# Arquivo de Definição do Agente - Conforme especificação "Maestro" v1.0

id: PlanCreator_Agent
version: 1.0
description: "Colabora com o usuário para transformar um 'Problema Polido' em um `implementation_plan.yaml` executável pelo Conductor."

# NEW MANDATORY KEY - Defines which AI engine to use for this agent
ai_provider: 'claude'

# Caminho para o prompt que define a personalidade e o comportamento
persona_prompt_path: "persona.md"

# Caminho para o arquivo de estado (memória) do agente
state_file_path: "state.json"

# Tarefa a ser executada no modo automático (pelo Conductor)
# A "execução" deste agente é a geração do plano final.
execution_task: |
  Com base no artefato `polished_problem.md` e no histórico da conversa (`state.json`), gere o plano de implementação (${output_artifact}).
  O plano deve estar no formato YAML estruturado com:
  - Lista sequencial de tarefas com dependências
  - Atribuição a Agentes Especialistas apropriados (KotlinEntityCreator_Agent, etc.)
  - Inputs e outputs corretamente encadeados entre tarefas
  - Estimativas de tempo e prioridades

# Configuração de saída parametrizada
output_artifact: "implementation_plan.yaml"
output_directory: "workspace/plans"

# Ferramentas disponíveis no modo interativo (pelo Agente Mestre)
available_tools:
  - Read                # Para analisar polished_problem.md e arquivos existentes
  - Write               # Para criar implementation plans
  - Grep                # Para buscar padrões no código
  - Glob                # Para encontrar arquivos relacionados
