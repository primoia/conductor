#!/bin/bash

# Claude MongoDB Watcher Runner Script
# Este script facilita a execu√ß√£o do claude-mongo-watcher.py com diferentes configura√ß√µes

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes padr√£o (usando vari√°veis de ambiente)
DEFAULT_MONGO_URI="${MONGO_URI:-mongodb://localhost:27017}"
DEFAULT_DATABASE="${MONGO_DATABASE:-conductor_state}"
DEFAULT_COLLECTION="${MONGO_COLLECTION:-tasks}"
DEFAULT_POLL_INTERVAL="${POLL_INTERVAL:-1.0}"
DEFAULT_LOG_FILE="${LOG_FILE:-/tmp/claude-watcher.log}"

# Caminho para o script
WATCHER_SCRIPT="poc/container_to_host/claude-mongo-watcher.py"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${BLUE}Claude MongoDB Watcher Runner${NC}"
    echo ""
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -u, --mongo-uri URI        URI de conex√£o MongoDB (padr√£o: $DEFAULT_MONGO_URI)"
    echo "  -d, --database DB          Nome do database (padr√£o: $DEFAULT_DATABASE)"
    echo "  -c, --collection COL       Nome da collection (padr√£o: $DEFAULT_COLLECTION)"
    echo "  -i, --poll-interval SEC    Intervalo entre verifica√ß√µes em segundos (padr√£o: $DEFAULT_POLL_INTERVAL)"
    echo "  -l, --log-file FILE        Arquivo de log (padr√£o: $DEFAULT_LOG_FILE)"
    echo "  -b, --background           Executar em background (nohup)"
    echo "  -k, --kill                 Matar processos existentes do watcher"
    echo "  -s, --status               Mostrar status dos processos"
    echo "  -t, --tail                 Mostrar √∫ltimas linhas do log"
    echo "  --test-connection          Testar conex√£o MongoDB"
    echo "  -h, --help                 Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0                                    # Usar configura√ß√µes padr√£o"
    echo "  $0 -u mongodb://localhost:27017      # URI customizada"
    echo "  $0 -d conductor -c tasks             # Database e collection customizados"
    echo "  $0 -i 2.0 -b                         # Poll interval 2s em background"
    echo "  $0 -k                                 # Parar watchers existentes"
    echo "  $0 -s                                 # Ver status"
    echo "  $0 -t                                 # Ver log"
}

# Fun√ß√£o para verificar se o script existe
check_script() {
    if [ ! -f "$WATCHER_SCRIPT" ]; then
        echo -e "${RED}‚ùå Erro: Script $WATCHER_SCRIPT n√£o encontrado${NC}"
        echo "Execute este script a partir do diret√≥rio projects/conductor/"
        exit 1
    fi
}

# Fun√ß√£o para matar processos existentes
kill_existing() {
    echo -e "${YELLOW}üîç Procurando processos existentes do claude-mongo-watcher...${NC}"
    
    PIDS=$(pgrep -f "claude-mongo-watcher" || true)
    
    if [ -z "$PIDS" ]; then
        echo -e "${GREEN}‚úÖ Nenhum processo encontrado${NC}"
    else
        echo -e "${YELLOW}üìã Processos encontrados: $PIDS${NC}"
        echo -e "${YELLOW}üõë Matando processos...${NC}"
        pkill -f "claude-mongo-watcher" || true
        sleep 2
        
        # Verificar se ainda existem processos
        REMAINING=$(pgrep -f "claude-mongo-watcher" || true)
        if [ -n "$REMAINING" ]; then
            echo -e "${RED}‚ö†Ô∏è  Ainda existem processos: $REMAINING${NC}"
            echo -e "${YELLOW}üíÄ For√ßando kill...${NC}"
            pkill -9 -f "claude-mongo-watcher" || true
        fi
        
        echo -e "${GREEN}‚úÖ Processos finalizados${NC}"
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo -e "${BLUE}üìä Status do Claude MongoDB Watcher${NC}"
    echo ""
    
    PIDS=$(pgrep -f "claude-mongo-watcher" || true)
    
    if [ -z "$PIDS" ]; then
        echo -e "${RED}‚ùå Nenhum processo ativo${NC}"
    else
        echo -e "${GREEN}‚úÖ Processos ativos:${NC}"
        ps aux | grep "claude-mongo-watcher" | grep -v grep || true
        echo ""
        echo -e "${BLUE}üìã Argumentos dos processos:${NC}"
        ps aux | grep "claude-mongo-watcher" | grep -v grep | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}' || true
    fi
    
    echo ""
    if [ -f "$DEFAULT_LOG_FILE" ]; then
        echo -e "${BLUE}üìÑ Log file: $DEFAULT_LOG_FILE${NC}"
        echo -e "${BLUE}üìè Tamanho: $(du -h "$DEFAULT_LOG_FILE" | cut -f1)${NC}"
        echo -e "${BLUE}üïí √öltima modifica√ß√£o: $(stat -c %y "$DEFAULT_LOG_FILE")${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Log file n√£o encontrado: $DEFAULT_LOG_FILE${NC}"
    fi
}

# Fun√ß√£o para mostrar tail do log
show_tail() {
    if [ -f "$DEFAULT_LOG_FILE" ]; then
        echo -e "${BLUE}üìÑ √öltimas 20 linhas do log:${NC}"
        echo ""
        tail -20 "$DEFAULT_LOG_FILE"
    else
        echo -e "${RED}‚ùå Log file n√£o encontrado: $DEFAULT_LOG_FILE${NC}"
    fi
}

# Fun√ß√£o para testar conex√£o
test_connection() {
    local mongo_uri="$1"
    local database="$2"
    local collection="$3"
    
    echo -e "${BLUE}üîç Testando conex√£o MongoDB...${NC}"
    echo -e "   URI: $mongo_uri"
    echo -e "   Database: $database"
    echo -e "   Collection: $collection"
    echo ""
    
    # Testar conex√£o com timeout
    timeout 10 python3 "$WATCHER_SCRIPT" --mongo-uri "$mongo_uri" --database "$database" --collection "$collection" --poll-interval 10.0 &
    local pid=$!
    
    # Aguardar um pouco para ver se conecta
    sleep 3
    
    if kill -0 $pid 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Conex√£o bem-sucedida!${NC}"
        echo -e "${YELLOW}üõë Parando teste...${NC}"
        kill $pid 2>/dev/null || true
        wait $pid 2>/dev/null || true
    else
        echo -e "${RED}‚ùå Falha na conex√£o${NC}"
    fi
}

# Fun√ß√£o para executar o watcher
run_watcher() {
    local mongo_uri="$1"
    local database="$2"
    local collection="$3"
    local poll_interval="$4"
    local log_file="$5"
    local background="$6"
    
    echo -e "${BLUE}üöÄ Iniciando Claude MongoDB Watcher${NC}"
    echo -e "${BLUE}üìä Configura√ß√µes:${NC}"
    echo -e "   MongoDB URI: $mongo_uri"
    echo -e "   Database: $database"
    echo -e "   Collection: $collection"
    echo -e "   Poll Interval: ${poll_interval}s"
    echo -e "   Log File: $log_file"
    echo -e "   Background: $background"
    echo ""
    
    # Montar comando
    CMD="python3 $WATCHER_SCRIPT --mongo-uri '$mongo_uri' --database '$database' --collection '$collection' --poll-interval $poll_interval"
    
    if [ "$background" = "true" ]; then
        echo -e "${YELLOW}üîÑ Executando em background...${NC}"
        nohup bash -c "$CMD" > "$log_file" 2>&1 &
        echo -e "${GREEN}‚úÖ Watcher iniciado em background (PID: $!)${NC}"
        echo -e "${BLUE}üìÑ Log sendo escrito em: $log_file${NC}"
        echo -e "${BLUE}üí° Use '$0 -s' para ver status ou '$0 -t' para ver log${NC}"
    else
        echo -e "${YELLOW}üîÑ Executando em foreground...${NC}"
        echo -e "${BLUE}üí° Use Ctrl+C para parar${NC}"
        echo ""
        exec bash -c "$CMD"
    fi
}

# Parse dos argumentos
MONGO_URI="$DEFAULT_MONGO_URI"
DATABASE="$DEFAULT_DATABASE"
COLLECTION="$DEFAULT_COLLECTION"
POLL_INTERVAL="$DEFAULT_POLL_INTERVAL"
LOG_FILE="$DEFAULT_LOG_FILE"
BACKGROUND="false"
KILL_ONLY="false"
STATUS_ONLY="false"
TAIL_ONLY="false"
TEST_CONNECTION="false"

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--mongo-uri)
            MONGO_URI="$2"
            shift 2
            ;;
        -d|--database)
            DATABASE="$2"
            shift 2
            ;;
        -c|--collection)
            COLLECTION="$2"
            shift 2
            ;;
        -i|--poll-interval)
            POLL_INTERVAL="$2"
            shift 2
            ;;
        -l|--log-file)
            LOG_FILE="$2"
            shift 2
            ;;
        -b|--background)
            BACKGROUND="true"
            shift
            ;;
        -k|--kill)
            KILL_ONLY="true"
            shift
            ;;
        -s|--status)
            STATUS_ONLY="true"
            shift
            ;;
        -t|--tail)
            TAIL_ONLY="true"
            shift
            ;;
        --test-connection)
            TEST_CONNECTION="true"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o desconhecida: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Executar a√ß√µes baseadas nos argumentos
if [ "$KILL_ONLY" = "true" ]; then
    kill_existing
    exit 0
fi

if [ "$STATUS_ONLY" = "true" ]; then
    show_status
    exit 0
fi

if [ "$TAIL_ONLY" = "true" ]; then
    show_tail
    exit 0
fi

if [ "$TEST_CONNECTION" = "true" ]; then
    test_connection "$MONGO_URI" "$DATABASE" "$COLLECTION"
    exit 0
fi

# Verificar se o script existe
check_script

# Se n√£o for apenas teste de conex√£o, matar processos existentes antes de iniciar
if [ "$TEST_CONNECTION" != "true" ]; then
    echo -e "${YELLOW}üîÑ Verificando processos existentes...${NC}"
    kill_existing
    sleep 1  # Aguardar um pouco para garantir que os processos foram finalizados
fi

# Executar o watcher
run_watcher "$MONGO_URI" "$DATABASE" "$COLLECTION" "$POLL_INTERVAL" "$LOG_FILE" "$BACKGROUND"