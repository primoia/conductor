#!/usr/bin/env python3
"""
Teste dos Mecanismos de Prote√ß√£o do Admin CLI

Testa todas as prote√ß√µes implementadas para prevenir loops infinitos
e garantir m√°xima confiabilidade.
"""

import tempfile
import unittest
from unittest.mock import Mock, patch
from pathlib import Path
import time

from src.cli.shared.repl_manager import REPLManager
from src.core.agent_logic import AgentLogic


def test_protection_mechanisms():
    """Testa todos os mecanismos de prote√ß√£o implementados."""
    print("üõ°Ô∏è TESTE DOS MECANISMOS DE PROTE√á√ÉO")
    print("=" * 50)
    
    # 1. Teste AgentLogic - N√£o relan√ßa exceptions
    print("\n1. üîß Testando AgentLogic.chat() - Corre√ß√£o do Loop")
    
    # Mock dependencies
    mock_state_repo = Mock()
    mock_llm_client = Mock()
    mock_llm_client.conversation_history = []
    
    # Simulate LLM client error
    mock_llm_client.invoke.side_effect = Exception("Argument list too long")
    
    agent_logic = AgentLogic(mock_state_repo, mock_llm_client)
    agent_logic.embodied = True
    agent_logic.prompt_engine = Mock()
    agent_logic.prompt_engine.build_prompt.return_value = "test prompt"
    
    # Should return error instead of raising
    result = agent_logic.chat("test message")
    
    print(f"   Resultado: {result[:50]}...")
    assert "‚ùå Chat failed" in result, "AgentLogic deve retornar erro em vez de relan√ßar exception"
    print("   ‚úÖ AgentLogic n√£o relan√ßa exceptions - CORRIGIDO")
    
    # 2. Teste REPLManager Circuit Breaker
    print("\n2. üõ°Ô∏è Testando Circuit Breaker do REPLManager")
    
    mock_cli = Mock()
    mock_cli.embodied = True
    mock_cli.agent_logic.get_current_agent.return_value = "TestAgent"
    
    repl = REPLManager("test", mock_cli)
    
    # Test initial state
    print(f"   Estado inicial: {repl.consecutive_errors} erros")
    assert repl.consecutive_errors == 0, "Deve come√ßar com 0 erros"
    
    # Simulate consecutive errors
    repl._handle_error()
    repl._handle_error() 
    repl._handle_error()  # 3rd error should trigger circuit breaker
    
    print(f"   Ap√≥s 3 erros: {repl.consecutive_errors} erros consecutivos")
    assert repl.consecutive_errors == 3, "Deve ter 3 erros consecutivos"
    
    # Test circuit breaker activation
    safety_check = repl._check_safety_limits()
    print(f"   Circuit breaker ativo: {not safety_check}")
    assert not safety_check, "Circuit breaker deve estar ativo ap√≥s 3 erros"
    
    # Test reset
    repl._reset_circuit_breaker()
    print(f"   Ap√≥s reset: {repl.consecutive_errors} erros")
    assert repl.consecutive_errors == 0, "Reset deve zerar erros"
    
    safety_check = repl._check_safety_limits()
    print(f"   Circuit breaker ap√≥s reset: {not safety_check}")
    assert safety_check, "Circuit breaker deve estar inativo ap√≥s reset"
    
    print("   ‚úÖ Circuit Breaker funcionando corretamente")
    
    # 3. Teste Limites de Sess√£o
    print("\n3. ‚è±Ô∏è Testando Limites de Sess√£o")
    
    # Test interaction limit
    repl.total_interactions = repl.max_interactions_per_session
    safety_check = repl._check_safety_limits()
    print(f"   Limite de intera√ß√µes atingido: {not safety_check}")
    assert not safety_check, "Deve parar quando limite de intera√ß√µes √© atingido"
    
    # Reset for next test
    repl.total_interactions = 0
    
    # Test session duration (simulate)
    original_start = repl.session_start_time
    repl.session_start_time = time.time() - repl.max_session_duration - 1
    safety_check = repl._check_safety_limits()
    print(f"   Limite de dura√ß√£o atingido: {not safety_check}")
    assert not safety_check, "Deve parar quando limite de tempo √© atingido"
    
    # Restore
    repl.session_start_time = original_start
    print("   ‚úÖ Limites de sess√£o funcionando corretamente")
    
    # 4. Teste Emergency Stop
    print("\n4. üö® Testando Emergency Stop")
    
    assert not repl.emergency_stop, "Emergency stop deve estar desativado inicialmente"
    
    repl._emergency_stop()
    assert repl.emergency_stop, "Emergency stop deve estar ativado ap√≥s comando"
    print("   ‚úÖ Emergency Stop funcionando corretamente")
    
    # 5. Teste Status de Seguran√ßa
    print("\n5. üìä Testando Status de Seguran√ßa")
    
    # Restore state for final test
    repl.emergency_stop = False
    repl.consecutive_errors = 1
    repl.total_interactions = 10
    
    # Capture status output (mock print)
    with patch('builtins.print') as mock_print:
        repl._show_safety_status()
        
    # Verify status was called
    assert mock_print.called, "Status deve imprimir informa√ß√µes"
    print("   ‚úÖ Status de seguran√ßa funcionando")
    
    print(f"\nüéØ TODOS OS MECANISMOS DE PROTE√á√ÉO FUNCIONANDO!")
    print("=" * 50)
    print("‚úÖ AgentLogic: N√£o relan√ßa exceptions")
    print("‚úÖ Circuit Breaker: Para ap√≥s 3 erros consecutivos")  
    print("‚úÖ Limites de Sess√£o: Tempo e intera√ß√µes controlados")
    print("‚úÖ Emergency Stop: Parada imediata dispon√≠vel")
    print("‚úÖ Reset Manual: Permite recupera√ß√£o controlada")
    print("=" * 50)
    
    return True


def test_error_detection():
    """Testa detec√ß√£o de erros no response."""
    print("\nüîç TESTE DE DETEC√á√ÉO DE ERROS")
    print("-" * 30)
    
    mock_cli = Mock()
    repl = REPLManager("test", mock_cli)
    
    # Test error response detection
    test_cases = [
        ("‚ùå Error in chat: something", True),
        ("‚úÖ Success response", False),
        ("‚ùå Chat failed: timeout", True),
        ("Normal response without errors", False)
    ]
    
    for response, should_be_error in test_cases:
        # Reset state
        repl.consecutive_errors = 0
        
        # Simulate response check
        if response and "‚ùå" in response:
            repl._handle_error()
            detected_error = repl.consecutive_errors > 0
        else:
            repl._handle_success()
            detected_error = False
        
        print(f"   '{response[:30]}...' -> Erro detectado: {detected_error}")
        assert detected_error == should_be_error, f"Detec√ß√£o incorreta para: {response}"
    
    print("   ‚úÖ Detec√ß√£o de erros funcionando corretamente")
    

if __name__ == "__main__":
    try:
        success = test_protection_mechanisms()
        test_error_detection()
        
        print(f"\nüöÄ SISTEMA ALTAMENTE CONFI√ÅVEL IMPLEMENTADO!")
        print("   Agora o Admin CLI n√£o entrar√° mais em loops infinitos")
        print("   M√°xima prote√ß√£o contra custos exponenciais")
        
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")
        raise