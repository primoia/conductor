#!/usr/bin/env python3
"""
Teste do Rate Limiting - Prote√ß√£o Anti-Spam
Testa se o sistema bloqueia tentativas muito r√°pidas (< 1 segundo)
"""

import time
from unittest.mock import Mock
from src.cli.shared.repl_manager import REPLManager


def test_rate_limiting():
    """Testa o mecanismo de rate limiting."""
    print("‚ö° TESTE DO RATE LIMITING (ANTI-SPAM)")
    print("=" * 50)
    
    # Mock do CLI
    mock_cli = Mock()
    mock_cli.embodied = True
    mock_cli.agent_logic.get_current_agent.return_value = "TestAgent"
    
    # Criar REPLManager
    repl = REPLManager("test", mock_cli)
    
    print(f"Configura√ß√£o: min {repl.min_interaction_interval}s entre intera√ß√µes")
    print()
    
    # Teste 1: Primeira intera√ß√£o (deve passar)
    print("1. üü¢ Testando primeira intera√ß√£o (deve passar)")
    rate_check = repl._check_rate_limiting()
    print(f"   Resultado: {rate_check} ‚úÖ")
    assert rate_check == True, "Primeira intera√ß√£o deve sempre passar"
    
    # Simular primeira intera√ß√£o processada com sucesso
    repl.last_interaction_time = time.time()
    
    # Teste 2: Segunda intera√ß√£o imediata (deve bloquear)
    print("\n2. üî¥ Testando intera√ß√£o imediata (deve bloquear)")
    rate_check = repl._check_rate_limiting()
    print(f"   Resultado: {rate_check} ‚úÖ")
    assert rate_check == False, "Intera√ß√£o imediata deve ser bloqueada"
    
    # Teste 3: Aguardar 2s (ainda deve bloquear)
    print("\n3. üü° Testando ap√≥s 2s (deve bloquear)")
    time.sleep(2.0)
    rate_check = repl._check_rate_limiting()
    print(f"   Resultado: {rate_check} ‚úÖ")
    assert rate_check == False, "Intera√ß√£o ap√≥s 2s deve ser bloqueada"
    
    # Teste 4: Aguardar mais 3.1s (total 5.1s, deve passar)
    print("\n4. üü¢ Testando ap√≥s 5.1s total (deve passar)")
    time.sleep(3.1)  # Total: 5.1s
    rate_check = repl._check_rate_limiting()
    print(f"   Resultado: {rate_check} ‚úÖ")
    assert rate_check == True, "Intera√ß√£o ap√≥s 5.1s deve passar"
    
    print("\nüéØ RATE LIMITING FUNCIONANDO PERFEITAMENTE!")
    print("‚úÖ Primeira intera√ß√£o: PASSOU")
    print("‚úÖ Intera√ß√£o imediata: BLOQUEADA") 
    print("‚úÖ Intera√ß√£o ap√≥s 2s: BLOQUEADA")
    print("‚úÖ Intera√ß√£o ap√≥s 5.1s: PASSOU")
    print("=" * 50)
    
    return True


def test_rate_limiting_with_other_limits():
    """Testa rate limiting em conjunto com outras prote√ß√µes."""
    print("\nüõ°Ô∏è TESTE DE INTEGRA√á√ÉO COM OUTRAS PROTE√á√ïES")
    print("-" * 50)
    
    mock_cli = Mock()
    mock_cli.embodied = True
    mock_cli.agent_logic.get_current_agent.return_value = "TestAgent"
    
    repl = REPLManager("test", mock_cli)
    
    # Simular 3 erros consecutivos para ativar circuit breaker
    repl.consecutive_errors = 3
    repl.last_error_time = time.time()
    
    # Verificar que circuit breaker tem prioridade
    print("1. Circuit breaker ativo + rate limiting")
    safety_check = repl._check_safety_limits()
    print(f"   Circuit breaker bloqueia: {not safety_check} ‚úÖ")
    assert safety_check == False, "Circuit breaker deve bloquear"
    
    # Reset circuit breaker
    repl.consecutive_errors = 0
    repl.last_error_time = 0
    
    # Testar apenas rate limiting
    repl.last_interaction_time = time.time()
    safety_check = repl._check_safety_limits()
    print(f"   Rate limiting bloqueia: {not safety_check} ‚úÖ")
    assert safety_check == False, "Rate limiting deve bloquear"
    
    print("\n‚úÖ Integra√ß√£o funcionando - m√∫ltiplas prote√ß√µes ativas")
    
    return True


if __name__ == "__main__":
    try:
        success1 = test_rate_limiting()
        success2 = test_rate_limiting_with_other_limits()
        
        print(f"\nüöÄ RATE LIMITING IMPLEMENTADO COM SUCESSO!")
        print("   Agora tentativas < 1s s√£o bloqueadas automaticamente")
        print("   Sistema protegido contra spam e automa√ß√£o maliciosa")
        print("   Integra√ß√£o perfeita com outras prote√ß√µes")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        raise